--6.SUB QUERY
--SCOTT이 근무하는 부서이름
SELECT DNAME FROM DEPT D, EMP E WHERE E.DEPTNO=D.DEPTNO AND ENAME='SCOTT';
(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT'); -- SUB QUERY
SELECT DNAME FROM DEPT WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT');   --MAIN QUERY
--SUB QUERY 의 종류
--JOB이 MANAGER인 사람의 부서이름.
SELECT ENAME FROM EMP WHERE JOB='MANAGER';
SELECT DNAME FROM DEPT WHERE DEPTNO IN(SELECT DEPTNO FROM EMP WHERE JOB='MANAGER'); --조건에 맞는 것이 다중행-> 다중행 SUB QUERY
SELECT DNAME FROM DEPT WHERE DEPTNO IN(10,20,30); -- 같은 결과

--단일행 서브쿼리
SELECT MAX(SAL) FROM EMP; -- 최고금액 SAL
--받는사람, 최고금액SAL
SELECT ENAME, SAL FROM EMP WHERE SAL=(SELECT MAX(SAL) FROM EMP); --항상 F9로 SUBQUERY 단일행으로 실행가능한지 TEST해야 함.
--SCOTT과 같은 부서에 근무하는 사람들 이름
SELECT ENAME FROM EMP WHERE DEPTNO=(SELECT DEPTNO FROM EMP WHERE ENAME='SCOTT')
    AND ENAME<>'SCOTT';
--SCOTT과 같은 근무지에 근무하는 사람들 이름
INSERT INTO DEPT VALUES (50,'IT','DALLAS');
INSERT INTO EMP VALUES(9999,'홍길동',NULL,NULL,NULL,9000,NULL,50);
ROLLBACK;
SELECT LOC FROM DEPT D, EMP E WHERE D.DEPTNO=E.DEPTNO AND ENAME='SCOTT';
SELECT ENAME FROM EMP E, DEPT D WHERE D.DEPTNO=E.DEPTNO 
    AND LOC=(SELECT LOC FROM DEPT D, EMP E WHERE D.DEPTNO=E.DEPTNO AND ENAME='SCOTT')
    AND ENAME<>'SCOTT';
--'SCOTT'과 같은 JOB을 가진 사원들의 모든 정보 출력
SELECT * FROM EMP WHERE JOB=(SELECT JOB FROM EMP WHERE ENAME='SCOTT');
--'SCOTT'과 급여가 동일하거나 더 많이 받는 사원 이름과 급여출력
SELECT ENAME, SAL FROM EMP WHERE SAL>=(SELECT SAL FROM EMP WHERE ENAME='SCOTT');
--직속상관이 KING인 사원의 이름과 급여
SELECT ENAME, SAL FROM EMP WHERE MGR=(SELECT EMPNO FROM EMP WHERE ENAME='KING');
--평균급여 이하를 받는 직원의 사번, 이름, 급여
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL<=(SELECT AVG(SAL) FROM EMP);
--부서번호, 부서별 최대급여, 그 최대급여를 받는 사람의 이름, 그 사람의 급여
SELECT DEPTNO, SAL, ENAME FROM EMP WHERE (DEPTNO, SAL) IN(SELECT DEPTNO, MAX(SAL)FROM EMP GROUP BY DEPTNO);
--단일행다중행서브쿼리 : SCOTT과 JOB도 같고 부서번호도 같은 사람의 모든 필드를 출력
SELECT * FROM EMP WHERE (JOB, DEPTNO)=(SELECT JOB,DEPTNO FROM EMP WHERE ENAME='SCOTT');

--연습문제
-- 1. 사원테이블에서 가장 먼저 입사한 사람의 이름, 급여, 입사일
SELECT ENAME, SAL, HIREDATE FROM EMP WHERE HIREDATE=(SELECT MIN(HIREDATE) FROM EMP);
-- 2. 회사에서 가장 급여가 적은 사람의 이름, 급여
SELECT ENAME, SAL FROM EMP WHERE SAL=(SELECT MIN(SAL) FROM EMP);
-- 3. 회사 평균보다 급여를 많이 받는 사람의 이름, 급여, 부서코드
SELECT ENAME, SAL, DEPTNO FROM EMP WHERE SAL>=(SELECT AVG(SAL) FROM EMP);
-- 4. 회사 평균 이하의 급여를 받는 사람의 이름, 급여, 부서명
SELECT ENAME, SAL, DNAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND SAL<=(SELECT AVG(SAL) FROM EMP);
-- 5. SCOTT보다 먼저 입사한 사람의 이름, 급여, 입사일, 급여 등급
SELECT ENAME, SAL, HIREDATE, GRADE FROM EMP, SALGRADE WHERE SAL BETWEEN LOSAL AND HISAL 
                                            AND HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME = 'SCOTT');
-- 6. 5번에 부서명 추가하고 급여가 큰 순 정렬
SELECT ENAME, SAL, HIREDATE, GRADE, DNAME FROM EMP E, DEPT D, SALGRADE WHERE SAL BETWEEN LOSAL AND HISAL 
                                            AND HIREDATE<(SELECT HIREDATE FROM EMP WHERE ENAME = 'SCOTT')
                                            AND E.DEPTNO=D.DEPTNO
                                            ORDER BY SAL DESC;
-- 7. 사원테이블에서 BLAKE 보다 급여가 많은 사원들의 사번, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL>(SELECT SAL FROM EMP WHERE ENAME='BLAKE');
-- 8. 사원테이블에서 MILLER보다 늦게 입사한 사원의 사번, 이름, 입사일을 검색하시오
SELECT EMPNO, ENAME, HIREDATE FROM EMP WHERE HIREDATE>(SELECT HIREDATE FROM EMP WHERE ENAME='MILLER');
-- 9. 사원테이블에서 사원전체 평균 급여보다 급여가 많은 사원들의 사번, 이름, 급여를 검색
SELECT EMPNO, ENAME, SAL FROM EMP WHERE SAL>(SELECT AVG(SAL) FROM EMP); 
-- 10. 사원테이블에서 CLARK와 같은 부서며, 사번이 7698인 직원의 급여보다 많은 급여를 받는 사원들의 사번, 이름, 급여 검색
SELECT EMPNO, ENAME, SAL FROM EMP WHERE DEPTNO =(SELECT DEPTNO FROM EMP WHERE ENAME='CLARK')
        AND SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698)
        AND ENAME<>'CLARK';
-- 11. 응용심화. 사원테이블에서 CLARK와 같은 부서명이며, 사번이 7698인 직원의 급여보다 많은 급여를 받는 사원들의 사번, 이름, 급여 검색
SELECT EMPNO, ENAME, SAL FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO 
        AND DNAME=(SELECT DNAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='CLARK')
        AND SAL>(SELECT SAL FROM EMP WHERE EMPNO=7698)
        AND ENAME<>'CLARK';
--12. 사원 테이블에서 BLAKE와 같은 부서에 있는 모든 사원의 이름과 입사일자를 출력하는 SELECT문을 작성하시오.
SELECT ENAME, HIREDATE FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO 
        AND DNAME=(SELECT DNAME FROM EMP E, DEPT D WHERE E.DEPTNO=D.DEPTNO AND ENAME='BLAKE');

-- 13. 사원 테이블에서 평균 급여 이상을 받는 모든 종업원에 대해서 종업원 번호와 이름을 출력하는 SELECT문을 작성하시오. (단 급여가 많은 순으로 출력하여라.)
SELECT EMPNO, ENAME FROM EMP WHERE SAL>(SELECT AVG(SAL) FROM EMP) ORDER BY SAL DESC;

--다중행 서브쿼리 : SUBQUERY의 실행결과가 다중행 IN,ALL,SOME=ANY,EXISTS
--DEPTNO별로 최대급여, 최대급여 받는 사람 이름.
SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO;--SUBQUERY
SELECT DEPTNO, SAL, ENAME FROM EMP
    WHERE (DEPTNO, SAL) IN (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO); --SUBQUERY->해당되는 행들IN 실행-> MAIN
--입사년별 최소급여, 받는 사람.
SELECT TO_CHAR(HIREDATE,'RR') "입사년", SAL "최소급여", ENAME FROM EMP
    WHERE (TO_CHAR(HIREDATE,'RR'), SAL) IN 
        (SELECT TO_CHAR(HIREDATE,'RR'), MIN(SAL) FROM EMP 
        GROUP BY TO_CHAR(HIREDATE,'RR'))
    ORDER BY 입사년;
--급여가 3000이상받는사원이 소속된 부서와 동일한 부서에서 근무하는 사원들의 모든 필드.
SELECT * FROM EMP WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE SAL>=3000);
--부서별로 입사일이 가장 늦은 사람의 부서번호, 이름, 입사일을 출력
SELECT DEPTNO, ENAME, HIREDATE FROM EMP 
    WHERE (DEPTNO, HIREDATE) 
        IN (SELECT DEPTNO, MAX(HIREDATE) FROM EMP GROUP BY DEPTNO);
--JOB별 가장 낮은 연봉을 받는 사람의 이름, JOB,연봉.
SELECT ENAME, JOB, SAL*12+NVL(COMM,0) FROM EMP
    WHERE (JOB, SAL*12+NVL(COMM,0)) 
        IN (SELECT JOB, MIN(SAL*12+NVL(COMM,0)) FROM EMP GROUP BY JOB);
--30번 부서 사원중 급여가 가장 많은 사원보다 더 많은 급여를 받는 사람의 이름, 급여
SELECT ENAME, SAL FROM EMP
    WHERE SAL > ALL (SELECT SAL FROM EMP WHERE DEPTNO=30);
SELECT ENAME, SAL FROM EMP
    WHERE SAL > (SELECT MAX(SAL) FROM EMP WHERE DEPTNO=30);
--30번 부서 사원 급여 중 가장 작은값(950)보다 많은 급여를 받은 사원의 이름, 급여
SELECT ENAME, SAL FROM EMP
    WHERE SAL > SOME(SELECT SAL FROM EMP WHERE DEPTNO=30);
SELECT ENAME, SAL FROM EMP
    WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE DEPTNO=30);
--직속부하가 있는 직원의 사원번호 이름 급여를 출력
SELECT DISTINCT M.EMPNO, M.ENAME, M.SAL FROM EMP W, EMP M
    WHERE W.MGR = M.EMPNO;
SELECT EMPNO, ENAME, SAL FROM EMP WHERE EMPNO IN (SELECT MGR FROM EMP);
SELECT EMPNO, ENAME, SAL FROM EMP WHERE EMPNO = ANY (SELECT MGR FROM EMP);
SELECT EMPNO, ENAME, SAL FROM EMP MANAGER
    WHERE EXISTS (SELECT EMPNO FROM EMP WORKER WHERE WORKER.MGR = MANAGER.EMPNO);
SELECT EMPNO, ENAME, SAL FROM EMP MANAGER
    WHERE EXISTS (SELECT EMPNO FROM EMP WHERE MGR = MANAGER.EMPNO);
--사번, 이름, 부서번호, SAL, 해당직원부서평균
SELECT EMPNO, ENAME, DEPTNO, SAL, (SELECT AVG(SAL) FROM EMP WHERE DEPTNO=E.DEPTNO) FROM EMP E;
--직속부하가 없는 직원들의 모든 정보를 출력
SELECT M.* FROM EMP W, EMP M WHERE W.MGR(+)=M.EMPNO AND W.MGR IS NULL;
SELECT * FROM EMP WHERE EMPNO NOT IN (SELECT MGR FROM EMP WHERE MGR IS NOT NULL); 
SELECT * FROM EMP WHERE EMPNO <> ALL (SELECT MGR FROM EMP WHERE MGR IS NOT NULL);
SELECT * FROM EMP MANAGER
    WHERE NOT EXISTS (SELECT * FROM EMP WHERE MGR=MANAGER.EMPNO);
    

--(4)	탄탄다지기
--?	부서별로 가장 급여를 많이 받는 사원의 정보(사원 번호, 사원이름, 급여, 부서번호)를 출력(IN 연산자 이용)
SELECT EMPNO, ENAME, SAL, DEPTNO FROM EMP WHERE (DEPTNO,SAL) IN (SELECT DEPTNO, MAX(SAL) FROM EMP GROUP BY DEPTNO);
--?	직급(JOB)이 MANAGER인 사람의 속한 부서의 부서 번호와 부서명과 지역을 출력(IN)
SELECT DISTINCT DEPTNO, DNAME, LOC FROM DEPT 
    WHERE DEPTNO IN (SELECT DEPTNO FROM EMP WHERE JOB='MANAGER');
--?	SAL이 3000이상인 사람들 중 연봉 등급을 나누어서 해당 등급별 최고 연봉을 받는 사람들의 사번, 이름, 직업, 입사일, 급여, 급여등급을 출력
SELECT EMPNO, ENAME, JOB, HIREDATE, SAL, GRADE 
    FROM EMP, SALGRADE
    WHERE SAL BETWEEN LOSAL AND HISAL AND SAL >=3000 AND 
        (GRADE, SAL) IN 
        (SELECT GRADE, MAX(SAL) 
            FROM EMP, SALGRADE 
            WHERE SAL BETWEEN LOSAL AND HISAL 
            GROUP BY GRADE);
--?	응용심화 : 입사일 분기별로 가장 높은 연봉을 받는 사람들의 분기, 사번, 이름, JOB, 상사사번, 입사일, 급여, 상여를 출력하세요
SELECT CEIL(TO_CHAR(HIREDATE,'MM')/3) "분기", EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM FROM EMP
    WHERE (CEIL(TO_CHAR(HIREDATE,'MM')/3), SAL*12+NVL(COMM,0)) 
        IN (SELECT CEIL(TO_CHAR(HIREDATE,'MM')/3), MAX(SAL*12+NVL(COMM,0)) FROM EMP GROUP BY CEIL(TO_CHAR(HIREDATE,'MM')/3))
    ORDER BY "분기";
--?	SALESMAN 모든 사원들 보다 급여를 많이 받는 사원들의 이름과 급여와 직급(담당 업무)를 출력하되 영업 사원은 출력하지 않는다.(ALL이용)
SELECT ENAME, SAL, JOB FROM EMP WHERE SAL > ALL(SELECT SAL FROM EMP WHERE JOB = 'SALESMAN'); 
SELECT ENAME, SAL, JOB FROM EMP WHERE SAL >(SELECT MAX(SAL) FROM EMP WHERE JOB = 'SALESMAN');
--?	SALESMAN 일부 어떤 한 사원보다 급여를 많이 받는 사원들의 이름과 급여와 직급(담당 업무)를 출력하되 영업 사원포함 출력(ANY)
SELECT ENAME, SAL, JOB FROM EMP WHERE SAL > ANY(SELECT SAL FROM EMP WHERE JOB='SALESMAN');
SELECT ENAME, SAL, JOB FROM EMP WHERE SAL > (SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');
--?	SAL이 3000미만인 사람 중에 가장 최근에 입사한 사람의 사원번호와 이름, SAL, 입사일을 출력
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP WHERE SAL<3000 AND HIREDATE >= ALL(SELECT HIREDATE FROM EMP);
SELECT EMPNO, ENAME, SAL, HIREDATE FROM EMP WHERE SAL<3000 AND HIREDATE = (SELECT MAX(HIREDATE) FROM EMP);
--?	직급이 ‘SALESMAN’인 사원이 받는 급여의 최소 급여보다 많이 받는 사원들의 이름, 급여, 직급, 부서번호를 출력하되 부서번호가 20번인 사원은 제외한다(ANY 연산자 이용)
SELECT ENAME, SAL, JOB, DEPTNO FROM EMP WHERE DEPTNO!=20 AND SAL > ANY(SELECT SAL FROM EMP WHERE JOB='SALESMAN');
SELECT ENAME, SAL, JOB, DEPTNO FROM EMP WHERE DEPTNO!=20 AND SAL > (SELECT MIN(SAL) FROM EMP WHERE JOB='SALESMAN');


